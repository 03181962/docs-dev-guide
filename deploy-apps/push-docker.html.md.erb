---
title: Deploying an App with Docker
owner: Diego
---

This topic describes how to use the [Cloud Foundry Command Line Interface (cf CLI)](../../cf-cli/install-go-cli.html) to push an app with a new or updated Docker image. <%= vars.product_runtime %> (<%= vars.product_short %>) then uses the Docker image to create containers for the app.

For an explanation of how Docker works in <%= vars.product_short %>, see [Using Docker in <%= vars.product_short %>](../../adminguide/docker.html).


## <a id='requirements'></a> Requirements

To push apps with Docker, you need:
 
* A <%= vars.product_short %> deployment that has Docker support enabled. To enable Docker support, see the [Enable Docker](../../adminguide/docker.html#enable) section of the _Using Docker in <%= vars.product_short %>_ topic.

* A Docker image that meets the following requirements:

  * The Docker image must contain an `/etc/passwd` file with an entry for the `root` user. In addition, the home directory and the shell for that `root` user  must be present in the image file system.

  * The total size of the Docker image file system layers must not exceed the disk quota for the app. The maximum disk allocation for apps is set by the Cloud Controller. The default maximum disk quota is 2048&nbsp;MB per app.
    <p class="note"><strong>Note:</strong> If the total size of the Docker image file system layers exceeds the disk quota, the app instances do not start.</p>

* The location of the Docker image on Docker Hub or another Docker registry. <% vars.docker_auth1 %>

* A registry that supports the Docker Registry HTTP API V2 and presents a valid certificate for HTTPS traffic. For more information, see the [Docker Registry HTTP API V2](https://docs.docker.com/registry/spec/api/) spec in the Docker documentation.

### <a id='cf-ssh'></a> Requirement for cf ssh Support

If you want to log in to your app container using the `cf ssh` command, you must make a shell such as `sh` or `bash` available in the container. 

The SSH server in the container looks for the following executables in absolute locations or the `PATH` environment variable:

* `/bin/bash`

* `/usr/local/bin/bash`

* `/bin/sh`

* `bash`

* `sh`


## <a id='tag'></a> Benefits of Specifying Tags

If you want your app container to be consistent after platform updates and code changes, specify a tag when you push your Docker image. Otherwise, the platform applies the `latest` tag without respecting changes to `PORT` or `ENTRYPOINT`.

If you push your Docker image without specifying a tag, you must run `cf restage` for the changes to take effect.


## <a id='port_config'></a> Port Configuration

By default, apps listen for connections on the port specified in the `PORT` environment variable for the app. <%= vars.product_short %> allocates this value dynamically.

When configuring a Docker image for <%= vars.product_short %>, you can control the exposed port and the corresponding value of `PORT` by specifying the `EXPOSE` directive in the image Dockerfile. If you specify the `EXPOSE` directive, then the corresponding app pushed to <%= vars.product_short %> listens on that exposed port. For example, if you set `EXPOSE` to `7070`, then the app listens for connections on port 7070.

If you do not specify a port in the `EXPOSE` directive, then the app listens on the value of the `PORT` environment variable as determined by <%= vars.product_short %>.
 
If you set the `PORT` environment variable via an `ENV` directive in a Dockerfile, <%= vars.product_short %> overrides the value with the system-determined value.

<%= vars.product_short %> supports only one exposed port on the image.

For more information about the `PORT` environment variable, see the [PORT](environment-variable.html#PORT) section of the _<%= vars.product_short %> Environment Variables_ topic. For more information about the `EXPOSE` directive, see the [EXPOSE](https://docs.docker.com/engine/reference/builder/#expose) section of the _Dockerfile reference_ topic in the Docker documentation.


## <a id='start_command'></a> Start Command

By default, Docker uses the start command specified in the Docker image. You can override the start command either by using a command-line parameter or by specifying it in a manifest file.

For more information about command-line parameters for `docker start`, see [docker start](https://docs.docker.com/engine/reference/commandline/start/) in the Docker Documentation.


## <a id='public'></a> Push a Docker Image From Docker Hub

To deploy a Docker image from a Docker Hub repository, run:

```
cf push APP-NAME --docker-image REPO/IMAGE:TAG
```

Where:

* `APP-NAME` is the name to give the pushed app on <%= vars.product_short %>.

* `REPO` is the name of the repository where the image is stored.

* `IMAGE` is the name of the app image on Docker Hub.

* (Optional, but recommended) `TAG` is the tag or version for the image.

For example, the following command pushes the `your-image` image from Docker Hub to a <%= vars.product_short %> app:

```
cf push your-app --docker-image cloudfoundry/your-image
```


## <a id='private'></a> Push a Docker Image from a Private Registry

As an alternative to Docker Hub, you can use any Docker image registry that presents a valid certificate for HTTPS traffic, such as a company-internal Docker registry.

To deploy a Docker image using a specified Docker registry, run:

```
cf push APP-NAME --docker-image YOUR-PRIVATE-REGISTRY.DOMAIN:PORT/REPO/IMAGE:TAG
```

Where: 
* `APP-NAME` is the name of the app being pushed.
* `YOUR-PRIVATE-REGISTRY.DOMAIN` is the path to the Docker registry.
* `PORT` is the port where the registry serves traffic.
* `REPO` is the name of the repository where the image is stored.
* `IMAGE` is the name of the image being pushed.
* (Optional, but recommended) `TAG` is the tag or version for the image.


## <a id='private-repo'></a> Push a Docker Image From a Registry with Authentication

Many Docker registries control access to Docker images by authenticating with a username and password.

<p class="note"><strong>Note:</strong> This procedure does not work with the Amazon Web Services Elastic Container Registry (AWS ECR) registry, which authenticates with temporary password tokens rather than username and password.</p>

To deploy a Docker image with registry authentication:

1. Make sure the `CF_DOCKER_PASSWORD` environment variable is set to the Docker registry user password.

1. Run:

    ```
    CF_DOCKER_PASSWORD=YOUR-PASSWORD cf push APP-NAME --docker-image REPO/IMAGE:TAG --docker-username USER
    ```
    Where:
    * `YOUR-PASSWORD` is the password to use for authentication with the registry.
    * `APP-NAME` is the name of the app being pushed.
    * `REPO` is the repository where the image is stored.
        * For Docker Hub, this is just the repository name.
        * For a private registry, this includes the registry address and port, as described in [Push a Docker Image from a Private Registry](#private), in the format `YOUR-PRIVATE-REGISTRY.DOMAIN:PORT/REPO`.
    * `IMAGE` is the name of the image being pushed.
    * (Optional, but recommended) `TAG` is the tag or version for the image.
    * `USER` is the username to use for authentication with the registry.


## <a id='gcr'></a> Push a Docker Image From Google Container Registry (GCR)

<%= vars.product_name %> supports pushing apps from images hosted on Google Container Registry (GCR) service. This feature requires that you use JSON key-based authentication. For more information, see the [JSON key file](https://cloud.google.com/container-registry/docs/advanced-authentication#json_key_file) section of the _Authentication methods_ topic in the Google Cloud documentation.

#### <a id='authenticate'></a> Step 1: Authenticate with GCR

To authenticate with GCR using <%= vars.product_name %>, you must create a JSON key file and associate it with your project.

To create a JSON key file and associate it with your project:

1. Create a GCP service account. To create a GCP service account, see [Creating and enabling service accounts for instances](https://cloud.google.com/compute/docs/access/create-enable-service-accounts-for-instances) in the Google Cloud documenation. Run: 
  
    ```
    gcloud iam service-accounts create YOUR-ACCOUNT --display-name "YOUR-DISPLAY-NAME"
    ```
    Where:
    * `YOUR-ACCOUNT` is the name of your service account.
    * `YOUR-DISPLAY-NAME` is the display name of your service account.

1. Set your project ID by running:

    ```
    gcloud config set project YOUR-PROJECT-ID
    ```
    Where `YOUR-PROJECT-ID` is your project ID.

1. Create a JSON key file and associate it with the service account by running:
  
    ```
    gcloud iam service-accounts keys create key.json --iam-account=YOUR-ACCOUNT​@​YOUR-PROJECT-ID.iam.gserviceaccount.com
    ```
    Where:
    * `YOUR-ACCOUNT` is the name of your service account.
    * `YOUR-PROJECT-ID` is your project ID.

1. Add the IAM policy binding for your project and service account by running:

    ```
    gcloud projects add-iam-policy-binding YOUR-PROJECT --member serviceAccount:YOUR-ACCOUNT​@​YOUR-PROJECT-ID.iam.gserviceaccount.com --role roles/storage.objectViewer
    ```
    Where:
    * `YOUR-PROJECT` is the name of your project.
    * `YOUR-ACCOUNT` is the name of your service account.
    * `YOUR-PROJECT-ID` is your project ID.

#### <a id='deploy'></a> Step 2: Deploy the GCP Image

To deploy your GCR image using the cf CLI, run:

```
CF_DOCKER_PASSWORD="$(cat key.json)" cf push APP-NAME --docker-image docker://YOUR-REGISTRY-URL/YOUR-PROJECT/YOUR-IMAGE-NAME --docker-username _json_key`
```

Where:

* `APP-NAME` is the name of the app being pushed.

* `YOUR-REGISTRY-URL` is the URL of your registry.

* `YOUR-PROJECT` is the name of your project.

* `YOUR-IMAGE-NAME` is the name of your image.

<p class="note"><strong>Note:</strong> The <code>key.json</code> file must point to the file you created in the previous step.</p>

<p class="note"><strong>Note:</strong> For information about specifying <code>YOUR-REGISTRY-URL</code>, see <a href="https://cloud.google.com/container-registry/docs/pushing-and-pulling">Pushing and Pulling Images</a> in the Google Cloud documentation.</p>


## <a id='volume'></a> Docker Volume Support

You can use volume services with Docker apps. For more information about enabling volume support, see [Using an External File System (Volume Services)](../services/using-vol-services.html).
