---
title: Deploy an App with Docker
owner: Diego
---

<strong><%= modified_date %></strong>

This topic describes how to use the 
[Cloud Foundry Command Line Interface (cf CLI)](../../cf-cli/install-go-cli.html) to push an app with a new or updated Docker image. Cloud Foundry then uses the Docker image to create containers for the app.

See the [Using Docker in Cloud Foundry](../../adminguide/docker.html) topic for an explanation of how Docker works in Cloud Foundry.

##<a id='requirements'></a>Requirements

To push apps with Docker, you need the following:

* A Cloud Foundry (CF) deployment that has Docker support enabled. To enable Docker support, see the [Enable Docker](../../adminguide/docker.html#enable) section of _Using Docker in Cloud Foundry_.

* A Docker image that meets the following requirements:

  * The Docker image must contain an `/etc/passwd` file with an entry for the `root` user. In addition, the home directory and the shell for that `root` user  must be present in the image file system.

  * The total size of the Docker image file system layers must not exceed the disk quota for the app. The maximum disk allocation for apps is set by the Cloud Controller. The default maximum disk quota is 2048 MB per app.

    <p class="note"><strong>Note</strong>: If the total size of the Docker image file system layers exceeds the disk quota, the app instances do not start.</p>

* The location of the Docker image on [Docker Hub](https://hub.docker.com) or another Docker registry. <% vars.docker_auth1 %>

* A registry that supports the [Docker Registry HTTP API V2](https://docs.docker.com/registry/spec/api/) and presents a valid certificate for HTTPS traffic.

<p class="note"><strong>Note</strong>: If you want to log in to your app container using the <code>cf ssh</code> command, a shell such as <code>sh</code> or <code>bash</code> must be available in the container. The SSH server in the container looks for the following executables in absolute locations or the <code>PATH</code> environment variable: <code>/bin/bash</code>, <code>/usr/local/bin/bash</code>, <code>/bin/sh</code>, <code>bash</code>, and <code>sh</code>.</p>

## <a id='port_config'></a>Port Configuration

By default, apps listen for connections on the port specified in the 
[PORT](environment-variable.html#PORT) 
environment variable for the app. Cloud Foundry allocates this value dynamically.

When configuring a Docker image for Cloud Foundry, you can control the exposed port and 
the corresponding value of `PORT` by specifying the 
[EXPOSE](https://docs.docker.com/engine/reference/builder/#expose) directive in the image Dockerfile. 
If you specify the `EXPOSE` directive, then the corresponding app pushed to Cloud Foundry listens on that 
exposed port. For example, if you set `EXPOSE` to `7070`, then the app listens for connections on port 7070.

If you do not specify a port in the `EXPOSE` directive, then the app listens on the value of the `PORT`
environment variable as determined by Cloud Foundry.
 
If you set the `PORT` environment variable via an `ENV` directive in a Dockerfile, Cloud Foundry overrides 
the value with the system-determined value.

Cloud Foundry supports only one exposed port on the image. 

##<a id='public'></a>Push a Docker Image From Docker Hub

To deploy a Docker image from a Docker Hub repository, run:

<pre class='terminal'>$ cf push APP-NAME --docker-image REPO/IMAGE:TAG</pre>

Replace the following values in the command above:

* `APP-NAME`: The name of the app being pushed
* `REPO`: The name of the repository where the image is stored
* `IMAGE`: The name of an image from Docker Hub
* `TAG`: (Optional) The tag or version for the image

For example, the following command pushes the `my-image` image from Docker Hub to a Cloud Foundry app:

<pre class='terminal'>$ cf push my-app --docker-image cloudfoundry/my-image</pre>

##<a id='private'></a>Push a Docker Image from a Private Registry

As an alternative to Docker Hub, you can use any Docker image registry that presents a valid certificate for HTTPS traffic, such as a company-internal Docker registry.

To deploy a Docker image using a specified Docker registry, run:

<pre class='terminal'>$ cf push APP-NAME --docker-image MY-PRIVATE-REGISTRY.DOMAIN:PORT/REPO/IMAGE:TAG
</pre>

Replace values in the command above as follows:

* `APP-NAME`: The name of the app being pushed
* `MY-PRIVATE-REGISTRY.DOMAIN`: The path to the Docker registry
* `PORT`: The port where the registry serves traffic
* `REPO`: The name of the repository where the image is stored
* `IMAGE`: The name of the image being pushed
* `TAG`: (Optional) The tag or version for the image

For example:
 
<pre class='terminal'>$ cf push my-app --docker-image internal-registry.example.com:5000/my-repo/my-image:v2
</pre>

##<a id='private-repo'></a>Push a Docker Image From a Registry with Authentication

Many Docker registries control access to Docker images by authenticating with a username and password. To deploy a Docker image with registry authentication:

1. With the `CF_DOCKER_PASSWORD` environment variable set to the Docker registry user password, run `cf push` with `--docker-image` and `--docker-username`:
  <pre class='terminal'>$ CF\_DOCKER\_PASSWORD=YOUR-PASSWORD cf push APP-NAME --docker-image REPO/IMAGE:TAG --docker-username USER
</pre>
  Replace values in the command above as follows:  
  - `YOUR-PASSWORD`: The password to use for authentication with the registry
  - `APP-NAME`: The name of the app being pushed
  - `REPO`: The repository where the image is stored:
      - For Docker Hub, this is the repository name
      - For a private registry, this includes the registry address and port, as described in [Push a Docker Image from a Private Registry](#private): `MY-PRIVATE-REGISTRY.DOMAIN:PORT/REPO`
  - `IMAGE`: The name of the image being pushed
  - `TAG`: (Optional) The tag or version for the image
  - `USER`: The username to use for authentication with the registry

##<a id='volume'></a> Docker Volume Support
You can use volume services with Docker apps. For more information about enabling volume support, see the [Using an External File System (Volume Services)](../services/using-vol-services.html) topic.